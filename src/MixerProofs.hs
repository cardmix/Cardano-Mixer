{-# LANGUAGE DataKinds                  #-}
{-# LANGUAGE DeriveAnyClass             #-}
{-# LANGUAGE DeriveGeneric              #-}
{-# LANGUAGE DerivingStrategies         #-}
{-# LANGUAGE FlexibleContexts           #-}
{-# LANGUAGE FlexibleInstances          #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE MultiParamTypeClasses      #-}
{-# LANGUAGE NoImplicitPrelude          #-}
{-# LANGUAGE NumericUnderscores         #-}
{-# LANGUAGE OverloadedStrings          #-}
{-# LANGUAGE ScopedTypeVariables        #-}
{-# LANGUAGE TemplateHaskell            #-}
{-# LANGUAGE TypeApplications           #-}
{-# LANGUAGE TypeFamilies               #-}
{-# LANGUAGE TypeOperators              #-}
{-# LANGUAGE TypeSynonymInstances       #-}

module MixerProofs (generateWithdrawProof, verifyWithdraw) where

import           Data.Aeson                       (decode)
import           Data.ByteString.Lazy             (readFile)
import           Data.Map                         (fromList)
import           PlutusTx.Prelude                 hiding (Semigroup(..), (<$>), unless, mapMaybe, find, toList, fromInteger)
import           Prelude                          (IO, (<$>))

import           Configuration.QAPConfig          (fileWithdrawR1CS, fileCRS)
import           Crypto


------------------------------------ Withdraw Proof ---------------------------------------------------

generateWithdrawProof :: (Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, [Fr], [Fr], Fr, Fr, Fr) -> IO Proof
generateWithdrawProof (root, a, key, keyA, c, oh, nh, r1, r2, cp, l, v1, v2, v3) = do
    (r1cs, wires) <- loadR1CSFile fileWithdrawR1CS
    crs <- fromMaybe emptyCRS . decode <$> readFile fileCRS
    let sa = SetupArguments r1cs wires
    -- constructing witness
    let w  = fromList $ zip ((0 :: Integer) : [6..37])
            ([one, root, a, key, keyA, c, oh, nh, r1, r2] ++ cp ++ l ++ [v1, v2, v3] :: [Fr])
        sol = solveR1CS r1cs w
        pa = ProveArguments sa crs sol
    generateProof pa

{-# INLINABLE verifyWithdraw #-}
verifyWithdraw :: [Fr] -> Proof -> Bool
verifyWithdraw = verify withdrawCRS

------------------------------ Withdraw Problem Definition --------------------------------------------

{-# INLINABLE withdrawCRS #-}
withdrawCRS :: ReducedReferenceString
withdrawCRS = ReducedReferenceString
    {
refRedGa = 
CP (Zp 3838445554206787051959185835248904189757267864408054644331214722898795406554465700018949683940077793914114648691080) (Zp 175256793305935998830936379688488062379077965244230423852724083388453941027523822170003352980359023633735920962851),
refRedHb = 
CP (E (P [Zp 2527933698655891426237008063547509441195186953755571354336738394765470824133964199938058545717798529570429490604283,Zp 3502415101010165882269365219976644951477637629549299389953821674152307256579490434873852071184554444517912228039242])) (E (P [Zp 2827155702302414681712899829642680213795204521548047981987935404248153498143567713093854280058777427489677655175136,Zp 1852272575083125280678025502268818911060370936274372228995725439796758369057218091586912913002780365200392620830849])),
refRedHg = 
CP (E (P [Zp 2576212134418371231057840271215984973848250055219239613406325557455042718204393245844432207590782667117334252164563,Zp 2147231001636807972940905298954900497184035607939380768023562383027395262393416518006059353905852163400836544674697])) (E (P [Zp 1518903020229547035439152281522616187808093875120629702330913771914444470775393013532613871290192247553628076658621,Zp 3904471393587261571501520190136842032023844353998396526892762816652718046154902044682371292279691999578725286482342])),
refRedHd = 
CP (E (P [Zp 718698267946981326249056447076694386639662935629944890497365653725667013330681475128075199300036287453295240117265,Zp 2769498493300736181832812473799098105862829297907777504053705401161852971461955383395128054435369502927344871936853])) (E (P [Zp 2549885686155940190641693062407249434953408082520424447548108410148948717622979132556008596208699430427104602331726,Zp 3631688253990924614572682510408542899242605424787940266195996775355591716177612960423849994958073216682275516066357])),
refRedGpub = [
CP (Zp 295036794678375577797906409478467316647054120504773881971235214004106281242509478845292321687631340291292476281168) (Zp 2090738616558953404178254874261976533345475455248975226174463974081855645061065793464064086334490155337724554806034),
CP (Zp 705629073019704469009563846833101809068936777449037514365557305896935111910688994483816377504586978249317661231417) (Zp 1876905470727092768713834951215174491913646378368263806004210011607339253550438615169320470713176452803053105193398),
CP (Zp 1432962426427077823594509888440061508465323151429355075129063977687602008532213978214325229133327049610756973635486) (Zp 1879090651209552434317871986220986123503134197696434191805440200069980841763082036651487779820439739460672127964159),
CP (Zp 2191350586554179256721763084372386539165762207165131719150321224297183577019576759653866794559149291031053023091945) (Zp 203467584946659851303239766160719827445473235782885619075920407380194565093928336444827655315499731769260382944218),
CP (Zp 3559704024976063905898605076013216816026336022747765405200498195473757377872469708356161169380560296145899715430396) (Zp 1535485861680829463830509722026501438307034400511725223009302536906423363621801394544231311578730104199001022635923),
CP (Zp 3373670086320738147827168415946198727038946548818857490732927227776946588604489039533621348036880944379515077779324) (Zp 2503144484011586709199587083172354005145346694726085778163726925206512156296898836200375749537680337336363155764672),
CP (Zp 2191350586554179256721763084372386539165762207165131719150321224297183577019576759653866794559149291031053023091945) (Zp 203467584946659851303239766160719827445473235782885619075920407380194565093928336444827655315499731769260382944218),
CP (Zp 3758221845905618912638284451431330582067250451766825047716010555815218372239075761540231549867494684020975424955205) (Zp 1670940387066218135607735519714318085917113718036824988751665339586831072134820591884027284191158815714787503713380),
CP (Zp 705629073019704469009563846833101809068936777449037514365557305896935111910688994483816377504586978249317661231417) (Zp 1876905470727092768713834951215174491913646378368263806004210011607339253550438615169320470713176452803053105193398),
CP (Zp 1432962426427077823594509888440061508465323151429355075129063977687602008532213978214325229133327049610756973635486) (Zp 1879090651209552434317871986220986123503134197696434191805440200069980841763082036651487779820439739460672127964159),
CP (Zp 2879119983868044389741136360093817375097351993764356482194630668008589041062734673375441383689232509658324710484624) (Zp 3600120378763210482712688825021602727686703476575819420776435909239757109406570882672359374249820416667124948978954),
CP (Zp 3559704024976063905898605076013216816026336022747765405200498195473757377872469708356161169380560296145899715430396) (Zp 1535485861680829463830509722026501438307034400511725223009302536906423363621801394544231311578730104199001022635923),
CP (Zp 3373670086320738147827168415946198727038946548818857490732927227776946588604489039533621348036880944379515077779324) (Zp 2503144484011586709199587083172354005145346694726085778163726925206512156296898836200375749537680337336363155764672)
]
    }
    