{-# LANGUAGE DataKinds                  #-}
{-# LANGUAGE DeriveAnyClass             #-}
{-# LANGUAGE DeriveGeneric              #-}
{-# LANGUAGE DerivingStrategies         #-}
{-# LANGUAGE FlexibleContexts           #-}
{-# LANGUAGE FlexibleInstances          #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE MultiParamTypeClasses      #-}
{-# LANGUAGE NoImplicitPrelude          #-}
{-# LANGUAGE NumericUnderscores         #-}
{-# LANGUAGE OverloadedStrings          #-}
{-# LANGUAGE ScopedTypeVariables        #-}
{-# LANGUAGE TemplateHaskell            #-}
{-# LANGUAGE TypeApplications           #-}
{-# LANGUAGE TypeFamilies               #-}
{-# LANGUAGE TypeOperators              #-}
{-# LANGUAGE TypeSynonymInstances       #-}

module MixerProofs (generateWithdrawProof, verifyWithdraw) where

import           Data.Aeson                       (decode)
import           Data.ByteString.Lazy             (readFile)
import           Data.Map                         (fromList, elems, toList)
import           PlutusTx.Prelude                 hiding (Semigroup(..), (<$>), unless, mapMaybe, find, toList, fromInteger)
import           Prelude                          (String, IO, (<$>), print)

import           Crypto

------------------------------------ Withdraw Proof ---------------------------------------------------

fileWithdrawR1CS :: String
fileWithdrawR1CS = "circuit-mixer.json"

generateWithdrawProof :: (Fr, Fr, Fr, Fr, Fr, Fr, Fr, [Fr], [Fr], Fr, Fr, Fr) -> IO Proof
generateWithdrawProof (root, a, key, leaf', c, r1, r2, cp, l, a', r1', r2') = do
    r1cs <- loadR1CSFile fileWithdrawR1CS
    crs <- fromMaybe emptyCRS . decode <$> readFile (folderQAPs ++ folderCRS ++ fileCRS)
    let sa = SetupArguments 9 34 21213 r1cs
    -- constructing witness
    let w  = fromList $ zip ((0 :: Integer) : [5..34])
            ([one, root, a, key, leaf', c, r1, r2] ++ cp ++ l ++ [a', r1', r2'] :: [Fr])
        sol = solveR1CS r1cs w
        pa = ProveArguments sa crs sol

        aa = map (makeSub sol . leftCoefs) r1cs
        bb = map (makeSub sol . rightCoefs) r1cs
        cc = map (makeSub sol . outCoefs) r1cs
        bsol = zipWith (PlutusTx.Prelude.==) (zipWith (PlutusTx.Prelude.*) aa bb) cc
    let (u, v, ww, h) = getR1CSPolynomials r1cs sol
    let x = Zp 2346090678554434230
    print $ evalPoly x u * evalPoly x v - evalPoly x ww - evalPoly x h * (pow x (length r1cs) - one)
    print $ length $ filter (== False) bsol
    print $ map ((elems sol) !! ) [1, 2, 3, 4]
    print $ length $ toList sol
    let ai = map snd (dropWhile (\(k, _) -> k <= 9) (toList sol))
    print $ length ai
    print $ map (length . unIDFT) [u, v, ww, h]
    print $ map length [refGxi crs, refGpriv crs, refGtarget crs]
    print $ length $ refHxi crs
    print $ length r1cs
    generateProof pa

{-# INLINABLE verifyWithdraw #-}
verifyWithdraw :: [Fr] -> Proof -> Bool
verifyWithdraw = verify withdrawCRS

------------------------------ Withdraw Problem Definition --------------------------------------------

{-# INLINABLE withdrawCRS #-}
withdrawCRS :: ReducedReferenceString
withdrawCRS = ReducedReferenceString
    {
refRedGa = 
CP (Zp 2304232619486845336853270104214335872699374422492235294983381287149699307164338060672598218240634033745790769362087) (Zp 1727360285680756173373956528997302179905747268906308799436963914912025275210216833030636972228987076436981700362856),
refRedHb = 
CP (E (P [Zp 1817620424340140196753354045215281030825178581587731896316982559901250889953099205788950682545208190487486475227707,Zp 2979430178439291342946299198727669138011730658200718135986091582459399878558413397032414752697712501167569083041817])) (E (P [Zp 1388821254184911806325040798804307798103953372554687637054113481294591801609878352410005890490190330362579424585229,Zp 3177832526796468755868399602124083932684990132146509015040334195846453007103447317067855433773475045122834790349784])),
refRedHg = 
CP (E (P [Zp 1697760317970182871446127340313709978220324314253206171107756929787421631728598153982948942520838817589534751142049,Zp 3355775524084856907153380009653513277052753240573228206537687811852855639306934152206440352447999636244660662808214])) (E (P [Zp 3430981071126289193871764652972002006148042602632954173674051930660676565526621694882609196859099750641652439674728,Zp 148758702725897887463704573654042169143530010708236504411744243221597846559364972962946842068213262579288098964571])),
refRedHd = 
CP (E (P [Zp 1561884481100058606912896314014274126999211020195945351409130635665591641262336132022987994338730996940850101203732,Zp 3164715413811506843253532063244045428678055727093192352436040931413061789985676283646267880064010166419146936520224])) (E (P [Zp 3140157838397033037188401268475697378973251154503210593279933511524420940355792859017161582758065913736406807517179,Zp 2142820694783761063179848158585974190881270037895979772574218673206877804217544627034550959995856168270980330841215])),
refRedGpub = [
CP (Zp 1678099398916993832652256309627779129583145607373986021923656749195999610897727811090374311626854079782017097417389) (Zp 1146622993378408318955159149129365698374031805678783742917991445503737848268725605652126482943278721342238576179643),
CP (Zp 1643161672556901818149057663897797703739283503075561323346519895665528352844796005357982215059046617603424930647653) (Zp 2652168355975713649585403678607466240270859023998885048958855254695101623755389505864201125387997706192584255137210),
CP (Zp 535136684503853732782935291820874109349246453890269497395274638356448500702457025006174168670645712288104595411786) (Zp 211003435546068855915283097247134677361877134696586671017768303017936015717309493037512885205692122924257580890540),
CP (Zp 3105976865964430318546802461362540604085817153124546629464819176014940174221827203045127446432972554749996041967854) (Zp 999163084540355957677475127800880935830528299841023605357605024152798113176311768810313176618810933559122050970932),
CP (Zp 1158733707218329812417834980629342939666082082999982106129674373982152002446837426873218296417730348888290300082449) (Zp 1026088084416148767102070431278769811846523129213872962996993915822433224358492796313705618463935880175575511519217),
CP (Zp 535136684503853732782935291820874109349246453890269497395274638356448500702457025006174168670645712288104595411786) (Zp 211003435546068855915283097247134677361877134696586671017768303017936015717309493037512885205692122924257580890540),
CP (Zp 3614911144191896913844971752108856122689430361968639228602318320145094206005011577294316275423106949122938095174603) (Zp 20815401659727577172953541654993801943490035591049610378475198145482191061742935708721830099098934440446188506198),
CP (Zp 1643161672556901818149057663897797703739283503075561323346519895665528352844796005357982215059046617603424930647653) (Zp 2652168355975713649585403678607466240270859023998885048958855254695101623755389505864201125387997706192584255137210),
CP (Zp 3105976865964430318546802461362540604085817153124546629464819176014940174221827203045127446432972554749996041967854) (Zp 999163084540355957677475127800880935830528299841023605357605024152798113176311768810313176618810933559122050970932),
CP (Zp 3229058833323147311108542598551148880235225623864580811413920456437687870143970209590948963998672066595987155346762) (Zp 2301415328218379510937797010998052002714515132982698327569585611165999938050726536813362366508910674492483411252525)
]
    }
    