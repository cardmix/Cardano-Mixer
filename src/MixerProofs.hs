{-# LANGUAGE DataKinds                  #-}
{-# LANGUAGE DeriveAnyClass             #-}
{-# LANGUAGE DeriveGeneric              #-}
{-# LANGUAGE DerivingStrategies         #-}
{-# LANGUAGE FlexibleContexts           #-}
{-# LANGUAGE FlexibleInstances          #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE MultiParamTypeClasses      #-}
{-# LANGUAGE NoImplicitPrelude          #-}
{-# LANGUAGE NumericUnderscores         #-}
{-# LANGUAGE OverloadedStrings          #-}
{-# LANGUAGE ScopedTypeVariables        #-}
{-# LANGUAGE TemplateHaskell            #-}
{-# LANGUAGE TypeApplications           #-}
{-# LANGUAGE TypeFamilies               #-}
{-# LANGUAGE TypeOperators              #-}
{-# LANGUAGE TypeSynonymInstances       #-}

module MixerProofs (generateWithdrawProof, generateSimulatedWithdrawProof, verifyWithdraw) where

import           Data.Aeson                       (decode)
import           Data.ByteString.Lazy             (readFile)
import           Data.Map                         (fromList)
import           PlutusTx.Prelude                 hiding (Semigroup(..), (<$>), unless, mapMaybe, find, toList, fromInteger)
import           Prelude                          (IO, (<$>))

import           Configuration.QAPConfig          (fileWithdrawR1CS, fileCRS)
import           Crypto


------------------------------------ Withdraw Proof ---------------------------------------------------

generateWithdrawProof :: (Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, [Fr], [Fr], Fr, Fr, Fr) -> IO Proof
generateWithdrawProof (root, a, key, keyA, c, oh, nh, r1, r2, cp, l, v1, v2, v3) = do
    (r1cs, wires) <- loadR1CSFile fileWithdrawR1CS
    crs <- fromMaybe emptyCRS . decode <$> readFile fileCRS
    let sa = SetupArguments r1cs wires
    -- constructing witness
    let w  = fromList $ zip ((0 :: Integer) : [6..37])
            ([one, root, a, key, keyA, c, oh, nh, r1, r2] ++ cp ++ l ++ [v1, v2, v3] :: [Fr])
        sol = solveR1CS r1cs w
        pa = ProveArguments sa crs sol
    generateProof pa

generateSimulatedWithdrawProof :: (Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr, [Fr], [Fr], Fr, Fr, Fr) -> IO Proof
generateSimulatedWithdrawProof (root, a, key, keyA, c, oh, nh, _, _, _, _, _, _, _) = do
    let subs = [one, zero, zero, zero, zero, zero, root, a, key, keyA, c, oh, nh] :: [Fr]
    secret <- generateProofSecret
    return $ simulate withdrawSecret secret withdrawCRS subs

{-# INLINABLE verifyWithdraw #-}
verifyWithdraw :: [Fr] -> Proof -> Bool
verifyWithdraw = verify withdrawCRS

------------------------------ Withdraw Problem Definition --------------------------------------------

{-# INLINABLE withdrawCRS #-}
withdrawCRS :: ReducedReferenceString
withdrawCRS = ReducedReferenceString
    {
refRedGa = 
CP (Zp 3778909173505208597033181318607431847232574918681168608937206115163718887560125118174119709033881667205779792371747) (Zp 297477589671569558242163373814153938138055303558667195574775828063132096244332577103901713833625979208384455999546),
refRedHb = 
CP (E (P [Zp 3363433232793185152098120484268475918252318405456681395521773573050903780888456301927645104247675963923725865597431,Zp 2470675658607679051319172340244362831936548885307178616121294330075552058837509915040906340950389416835504469880312])) (E (P [Zp 1405909015419064165272896059602745526245188496580627755979678804317693442616194783359710516592090610000580544982061,Zp 2838246195005323122001025049624751619485284415015169181237069425099882180160208951759811427741721614294804778214189])),
refRedHg = 
CP (E (P [Zp 3182780997985820993544867945796761812452292754020414054801114169246729358230543061256774758308757611214579568866767,Zp 2662563630694481018672957728424829865110735451032128982625727173259090114941846796979732776245311271370040224651056])) (E (P [Zp 1472198638288980513188790823259541096870360478832406893519572647822354665065118586506057900937668885842839193550839,Zp 3880664888187646686506959770584108822048883440523154809496136852418154884969433140385601257659819019259196820112748])),
refRedHd = 
CP (E (P [Zp 2744272527895005698616029573324257244083388728663981162425707363697596793131018680228061622940836878443068066170524,Zp 1123810905600324444323122493249252830705250224507467667969191417999981616339450229567530092819463873250677242298795])) (E (P [Zp 2334086713642829838790121877854466812461541624761095819503502118298783435851390614419528188824135659001288278560909,Zp 1297473243691689419646350111606546835674408515751193655876438267978045317742711576352397626930141328617644647047637])),
refRedGpub = [
CP (Zp 3046491883462667763450272495811408254800836046779386843504715844950115525207823962398164391183534254947461179612660) (Zp 615849257576424159981352911774066075454605671726256830261348999316129376754824116375288089146817898707287163356019),
CP (Zp 3490557589353586505159394876157120131317310003419970058042289064274219674018957748927987187475773325810263399237151) (Zp 3944991525871478524477403834296910994350155639131097663332726914598092171449604793627755811126835674032840322451704),
CP (Zp 1591945118827759237114352893037524581932543933725410618544849947531524121845397467167382786855123381557607185844093) (Zp 2293869099542152656737335814242607467639547845016586464824794176109912311896760240739375606831196654242177478912539),
CP (Zp 1763891490628973194726760082051042032930011786201138885973226983416963688312676835732490781143108786067181560325397) (Zp 1463024903715905100375649726990802338277809231564189975420254620418358946990114578850452886331672460446110598848365),
CP (Zp 2862344775742817687233534948744477368828269650254358595307232065593967521592586985138235743955165761557971080745599) (Zp 2820149628585799876491821176025568044057588420131367533801747420688653223663867071706535130542084980214246333759493),
CP (Zp 3748966733947060468672915153170920270497682660621664700117235436913452242197504441662362164566431024752251995813033) (Zp 3133724104088372950556181810385891831002050293591564801420731821943928158384985786784906535832326446394290019679382),
CP (Zp 1763891490628973194726760082051042032930011786201138885973226983416963688312676835732490781143108786067181560325397) (Zp 1463024903715905100375649726990802338277809231564189975420254620418358946990114578850452886331672460446110598848365),
CP (Zp 432543065289023436523936922931567493907666187474374089241300931356809193823914901930457362164047632633855538488540) (Zp 721144067364155833395772622200507425934191911531665514628287767739630683996833393412204200779159929223007465248689),
CP (Zp 3490557589353586505159394876157120131317310003419970058042289064274219674018957748927987187475773325810263399237151) (Zp 3944991525871478524477403834296910994350155639131097663332726914598092171449604793627755811126835674032840322451704),
CP (Zp 1591945118827759237114352893037524581932543933725410618544849947531524121845397467167382786855123381557607185844093) (Zp 2293869099542152656737335814242607467639547845016586464824794176109912311896760240739375606831196654242177478912539),
CP (Zp 2381353271767700959755161642004851478318015457992721561569995623596442087808953034603279303432457818221853716992600) (Zp 306758529840478860533053775266799185375324941545981729390580700930731004531906555248276967023825873222682902590229),
CP (Zp 2862344775742817687233534948744477368828269650254358595307232065593967521592586985138235743955165761557971080745599) (Zp 2820149628585799876491821176025568044057588420131367533801747420688653223663867071706535130542084980214246333759493),
CP (Zp 3748966733947060468672915153170920270497682660621664700117235436913452242197504441662362164566431024752251995813033) (Zp 3133724104088372950556181810385891831002050293591564801420731821943928158384985786784906535832326446394290019679382)
]
    }

--     {
-- refRedGa = 
-- CP (Zp 3838445554206787051959185835248904189757267864408054644331214722898795406554465700018949683940077793914114648691080) (Zp 175256793305935998830936379688488062379077965244230423852724083388453941027523822170003352980359023633735920962851),
-- refRedHb = 
-- CP (E (P [Zp 2527933698655891426237008063547509441195186953755571354336738394765470824133964199938058545717798529570429490604283,Zp 3502415101010165882269365219976644951477637629549299389953821674152307256579490434873852071184554444517912228039242])) (E (P [Zp 2827155702302414681712899829642680213795204521548047981987935404248153498143567713093854280058777427489677655175136,Zp 1852272575083125280678025502268818911060370936274372228995725439796758369057218091586912913002780365200392620830849])),
-- refRedHg = 
-- CP (E (P [Zp 2576212134418371231057840271215984973848250055219239613406325557455042718204393245844432207590782667117334252164563,Zp 2147231001636807972940905298954900497184035607939380768023562383027395262393416518006059353905852163400836544674697])) (E (P [Zp 1518903020229547035439152281522616187808093875120629702330913771914444470775393013532613871290192247553628076658621,Zp 3904471393587261571501520190136842032023844353998396526892762816652718046154902044682371292279691999578725286482342])),
-- refRedHd = 
-- CP (E (P [Zp 718698267946981326249056447076694386639662935629944890497365653725667013330681475128075199300036287453295240117265,Zp 2769498493300736181832812473799098105862829297907777504053705401161852971461955383395128054435369502927344871936853])) (E (P [Zp 2549885686155940190641693062407249434953408082520424447548108410148948717622979132556008596208699430427104602331726,Zp 3631688253990924614572682510408542899242605424787940266195996775355591716177612960423849994958073216682275516066357])),
-- refRedGpub = [
-- CP (Zp 295036794678375577797906409478467316647054120504773881971235214004106281242509478845292321687631340291292476281168) (Zp 2090738616558953404178254874261976533345475455248975226174463974081855645061065793464064086334490155337724554806034),
-- CP (Zp 705629073019704469009563846833101809068936777449037514365557305896935111910688994483816377504586978249317661231417) (Zp 1876905470727092768713834951215174491913646378368263806004210011607339253550438615169320470713176452803053105193398),
-- CP (Zp 1432962426427077823594509888440061508465323151429355075129063977687602008532213978214325229133327049610756973635486) (Zp 1879090651209552434317871986220986123503134197696434191805440200069980841763082036651487779820439739460672127964159),
-- CP (Zp 2191350586554179256721763084372386539165762207165131719150321224297183577019576759653866794559149291031053023091945) (Zp 203467584946659851303239766160719827445473235782885619075920407380194565093928336444827655315499731769260382944218),
-- CP (Zp 3559704024976063905898605076013216816026336022747765405200498195473757377872469708356161169380560296145899715430396) (Zp 1535485861680829463830509722026501438307034400511725223009302536906423363621801394544231311578730104199001022635923),
-- CP (Zp 3373670086320738147827168415946198727038946548818857490732927227776946588604489039533621348036880944379515077779324) (Zp 2503144484011586709199587083172354005145346694726085778163726925206512156296898836200375749537680337336363155764672),
-- CP (Zp 2191350586554179256721763084372386539165762207165131719150321224297183577019576759653866794559149291031053023091945) (Zp 203467584946659851303239766160719827445473235782885619075920407380194565093928336444827655315499731769260382944218),
-- CP (Zp 3758221845905618912638284451431330582067250451766825047716010555815218372239075761540231549867494684020975424955205) (Zp 1670940387066218135607735519714318085917113718036824988751665339586831072134820591884027284191158815714787503713380),
-- CP (Zp 705629073019704469009563846833101809068936777449037514365557305896935111910688994483816377504586978249317661231417) (Zp 1876905470727092768713834951215174491913646378368263806004210011607339253550438615169320470713176452803053105193398),
-- CP (Zp 1432962426427077823594509888440061508465323151429355075129063977687602008532213978214325229133327049610756973635486) (Zp 1879090651209552434317871986220986123503134197696434191805440200069980841763082036651487779820439739460672127964159),
-- CP (Zp 2879119983868044389741136360093817375097351993764356482194630668008589041062734673375441383689232509658324710484624) (Zp 3600120378763210482712688825021602727686703476575819420776435909239757109406570882672359374249820416667124948978954),
-- CP (Zp 3559704024976063905898605076013216816026336022747765405200498195473757377872469708356161169380560296145899715430396) (Zp 1535485861680829463830509722026501438307034400511725223009302536906423363621801394544231311578730104199001022635923),
-- CP (Zp 3373670086320738147827168415946198727038946548818857490732927227776946588604489039533621348036880944379515077779324) (Zp 2503144484011586709199587083172354005145346694726085778163726925206512156296898836200375749537680337336363155764672)
-- ]
--     }
    
withdrawSecret :: ZKSetupSecret
withdrawSecret = ZKSetupSecret
  {
    secretAlpha = Zp 31166319297144590835384498065326183885678969878576160684492776349571265369561,
    secretBeta  = Zp 22217971736162304410974286655175391311938300667854221456573795939742078018842,
    secretGamma = Zp 24231911266267795336766923032129536952739002865218585400658043457508491429146,
    secretDelta = Zp 23922179100645229395296072467022171660941001855324254442556550539532739473801,
    secretX     = Zp 34962842270303863939238049877882078985638713473987714022146679502607935256580
  }